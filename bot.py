import telebot
from telebot import types
from time import sleep

from config import TOKEN

import logging

logger = logging.getLogger(__name__)

bot = telebot.TeleBot(TOKEN)

questions = {
    0: {
        "question": "–í–æ–ø—Ä–æ—Å –ø–µ—Ä–≤—ã–π: –ö–∞–∫–∞—è –≥—Ä—É–ø–ø–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö —Ç–µ–±–µ –±–æ–ª—å—à–µ –Ω—Ä–∞–≤–∏—Ç—Å—è?",
        "variants": ("–ú–ª–µ–∫–æ–ø–∏—Ç–∞—é—â–∏–µ", "–ü—Ç–∏—Ü—ã", "–†—ã–±—ã", "–†–µ–ø—Ç–∏–ª–∏–∏")
        },
    1: {
        "question": "–ö–∞–∫–æ–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏ –≤–µ–¥–µ—Ç –∂–∏–≤–æ—Ç–Ω–æ–µ?",
        "variants": ("–ù–æ—á–Ω–æ–π", "–î–Ω–µ–≤–Ω–æ–π", "–°–º–µ—à–∞–Ω–Ω—ã–π", "–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã")
        },
    2: {
        "question": "–ö–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç –∂–∏–≤–æ—Ç–Ω–æ–µ?",
        "variants": ("–ú–∏–ª–µ–Ω—å–∫–æ", "–£—Å—Ç—Ä–∞—à–∞—é—â–µ", "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ", "–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã")
        },
    3: {
        "question": "–ö–∞–∫–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä —É –∂–∏–≤–æ—Ç–Ω–æ–≥–æ?",
        "variants": ("–°–ø–æ–∫–æ–π–Ω—ã–π", "–ò–≥—Ä–∏–≤—ã–π", "–î–µ—Ä–∑–∫–∏–π", "–ú–∏–ª—ã–π")
        }
    }
answer_weights = {
    "–ú–ª–µ–∫–æ–ø–∏—Ç–∞—é—â–∏–µ": 0, "–ü—Ç–∏—Ü—ã": 1, "–†—ã–±—ã": 2, "–†–µ–ø—Ç–∏–ª–∏–∏": 3,
    "–ù–æ—á–Ω–æ–π": 0, "–î–Ω–µ–≤–Ω–æ–π": 1, "–°–º–µ—à–∞–Ω–Ω—ã–π": 2, "–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã": 3,
    "–ú–∏–ª–µ–Ω—å–∫–æ": 0, "–£—Å—Ç—Ä–∞—à–∞—é—â–µ": 1, "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ": 2,
    "–°–ø–æ–∫–æ–π–Ω—ã–π": 0, "–ò–≥—Ä–∏–≤—ã–π": 1, "–î–µ—Ä–∑–∫–∏–π": 2, "–ú–∏–ª—ã–π": 3,
    }


# Handles all text messages that contains the commands '/start' or '/help'.
# @bot.message_handler(commands=['start', 'help'])
# def send_welcome(message):
#     bot.reply_to(message, "Howdy, how are you doing?")


# @bot.message_handler(func=lambda message: True)
# def echo_all(message):
#     bot.reply_to(message, message.text)
# @bot.message_handler(commands = ['start', 'help'])
# def start(message: telebot.types.Message):
    # text = "–ü—Ä–∏–≤–µ—ÇüòÉ. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –±–æ—Ç—É:\n/start - –ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã\n/convert - –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é"
    # bot.send_message(message.chat.id, text)

#
# @bot.message_handler(commands=['start', 'help'])
# def greetings(message):
#     print('–ü—Ä–∏–≤–µ—Ç')

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    print('–ü—Ä–∏–≤–µ—Ç')
    # bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç")

    keyboard = types.InlineKeyboardMarkup(row_width=2)
    btn1 = types.InlineKeyboardButton(text="–û –ú–æ—Å–∫–æ–≤—Å–∫–æ–º –∑–æ–æ–ø–∞—Ä–∫–µ", url="https://moscowzoo.ru/")
    btn2 = types.InlineKeyboardButton(text="–û n—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏", url="https://moscowzoo.ru/my-zoo/become-a-guardian/")
    keyboard.add(btn1, btn2)
    logo = open('./cat.jpg', 'rb')
    # logo = open('/content/MZoo-logo-—Åircle-universal-small-preview.jpg', 'rb')
    bot.send_photo(message.chat.id, photo=logo, caption="–üp–∏–≤–µ—Ç—Å—Ç–≤—É—éüòÉ", reply_markup=keyboard)

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton(text="Ha—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É"))
    msg = bot.send_message(message.chat.id, text="–ü—Ä–æ–π–¥–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏ —É–∑–Ω–∞–π —Å–≤–æ—ë —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ!", reply_markup=keyboard)

    bot.register_next_step_handler(msg, ask_question)


@bot.message_handler(content_types=['text'])
def ask_question(message: types.Message, step=0, result=0):
    if step:
        result += answer_weights.get(message.text)

    question = questions.get(step)
    question_text = question.get('question')
    keyboard = create_keyboard(question)

    next_step = step + 1

    if next_step in questions:
        msg = bot.send_message(message.chat.id, text=question_text, reply_markup=keyboard)
        bot.register_next_step_handler(msg, ask_question, next_step, result)
    else:  # –≤–æ–ø—Ä–æ—Å –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–º
        msg = bot.send_message(message.chat.id, text=question_text, reply_markup=keyboard)
        bot.register_next_step_handler(msg, show_result, result)


@bot.message_handler(content_types=['text'])
def show_result(message: types.Message, result):
    result += answer_weights.get(message.text)

    text = f'–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç {result}.\n–ë–∞—Ä—Ö–∞–Ω–Ω—ã–π –∫–æ—Ç –Ω–µ –≤–ø–µ—á–∞—Ç–ª—ë–Ω.'
    image = open('./cat.jpg', 'rb')
    bot.send_photo(message.chat.id, photo=image, caption=text)


    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton(text="Ha—áa—Ç—å –∑a–Ωo–≤o"))
    msg = bot.send_message(message.chat.id, text='–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –µ—â—ë —Ä–∞–∑, –Ω–∞–∂–º–∏ "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"', reply_markup=keyboard)
    bot.register_next_step_handler(msg, ask_question)


    inline_keyboard = types.InlineKeyboardMarkup()
    url_button = types.InlineKeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ vk", url=f"https://vk.com/share.php?&title={result}")
    inline_keyboard.add(url_button)
    bot.send_message(msg.chat.id, "‚¨áÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏ –≤ vk, –Ω–∞–∂–∞–≤ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ:", reply_markup=inline_keyboard)


    inline_keyboard2 = types.InlineKeyboardMarkup()
    url_button2 = types.InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", url=f"https://vk.com/share.php?&title={result}")
    inline_keyboard2.add(url_button2)
    bot.send_message(msg.chat.id, '‚¨áÔ∏è –ß—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤, –Ω–∞–∂–º–∏ "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"', reply_markup=inline_keyboard2)

    # keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    # keyboard.add(types.KeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"))
    # msg = bot.send_message(message.chat.id, text='–ß—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤, –Ω–∞–∂–º–∏ "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"',
    #                        reply_markup=keyboard)
    # bot.register_next_step_handler(msg, ask_question)





# @bot.message_handler(commands=['test'])
# def review(message):
#     print('–ï—â–µ –ø—Ä–∏–≤–µ—Ç')
#     keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
#     keyboard.add(types.KeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"))
#     msg = bot.send_message(message.chat.id, text='–ß—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤, –Ω–∞–∂–º–∏ "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"',
#                            reply_markup=keyboard)
#     bot.register_next_step_handler(msg, ask_question)





def create_keyboard(question):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = []
    for var in question.get('variants'):
        buttons.append(types.KeyboardButton(text=var))
    keyboard.add(*buttons)
    return keyboard


bot.infinity_polling()













#
#
#
# questions = {
#     0: {
#         "question": "–í–æ–ø—Ä–æ—Å –ø–µ—Ä–≤—ã–π: –ö–∞–∫–∞—è –≥—Ä—É–ø–ø–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö —Ç–µ–±–µ –±–æ–ª—å—à–µ –Ω—Ä–∞–≤–∏—Ç—Å—è?",
#         "variants": ("–ú–ª–µ–∫–æ–ø–∏—Ç–∞—é—â–∏–µ", "–ü—Ç–∏—Ü—ã", "–†—ã–±—ã", "–†–µ–ø—Ç–∏–ª–∏–∏")
#         },
#     1: {
#         "question": "–ö–∞–∫–æ–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏ –≤–µ–¥–µ—Ç –∂–∏–≤–æ—Ç–Ω–æ–µ?",
#         "variants": ("–ù–æ—á–Ω–æ–π", "–î–Ω–µ–≤–Ω–æ–π", "–°–º–µ—à–∞–Ω–Ω—ã–π", "–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã")
#         },
#     2: {
#         "question": "–ö–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç –∂–∏–≤–æ—Ç–Ω–æ–µ?",
#         "variants": ("–ú–∏–ª–µ–Ω—å–∫–æ", "–£—Å—Ç—Ä–∞—à–∞—é—â–µ", "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ", "–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã")
#         },
#     3: {
#         "question": "–ö–∞–∫–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä —É –∂–∏–≤–æ—Ç–Ω–æ–≥–æ?",
#         "variants": ("–°–ø–æ–∫–æ–π–Ω—ã–π", "–ò–≥—Ä–∏–≤—ã–π", "–î–µ—Ä–∑–∫–∏–π", "–ú–∏–ª—ã–π")
#         }
#     }
# answer_weights = {
#     "–ú–ª–µ–∫–æ–ø–∏—Ç–∞—é—â–∏–µ": 0, "–ü—Ç–∏—Ü—ã": 1, "–†—ã–±—ã": 2, "–†–µ–ø—Ç–∏–ª–∏–∏": 3,
#     "–ù–æ—á–Ω–æ–π": 0, "–î–Ω–µ–≤–Ω–æ–π": 1, "–°–º–µ—à–∞–Ω–Ω—ã–π": 2, "–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã": 3,
#     "–ú–∏–ª–µ–Ω—å–∫–æ": 0, "–£—Å—Ç—Ä–∞—à–∞—é—â–µ": 1, "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ": 2,
#     "–°–ø–æ–∫–æ–π–Ω—ã–π": 0, "–ò–≥—Ä–∏–≤—ã–π": 1, "–î–µ—Ä–∑–∫–∏–π": 2, "–ú–∏–ª—ã–π": 3,
#     }
#
#
#
#
# def review()

    # keyboard2 = types.ReplyKeyboardMarkup(resize_keyboard=True)
    # keyboard2.add(types.KeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"))
    # msg = bot.send_message(message.chat.id, text='–ß—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤, –Ω–∞–∂–º–∏ "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"',
    #                        reply_markup=keyboard)
    # bot.register_next_step_handler(msg, ask_question)


    # inline_keyboard2 = types.InlineKeyboardMarkup()
    # bot.send_message(msg.chat.id, "‚¨áÔ∏è –¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –æ—Ç–∑—ã–≤:", reply_markup=inline_keyboard2)
    # url_button2 = types.InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", url={result})
    # inline_keyboard2.add(url_button2)
#
#
#
# @bot.message_handler(commands=['start', 'help'])
# def greetings(message: types.Message):
#     print('–ü—Ä–∏–≤–µ—Ç')
#     keyboard = types.InlineKeyboardMarkup(row_width=2)
#     btn1 = types.InlineKeyboardButton(text="–û –ú–æ—Å–∫–æ–≤—Å–∫–æ–º –∑–æ–æ–ø–∞—Ä–∫–µ", url="https://moscowzoo.ru/")
#     btn2 = types.InlineKeyboardButton(text="–û n—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏", url="https://moscowzoo.ru/my-zoo/become-a-guardian/")
#     keyboard.add(btn1, btn2)
#     # logo = open('/content/MZoo-logo-—Åircle-universal-small-preview.jpg', 'rb')
#     bot.send_photo(message.chat.id, photo='logo', caption="–üp–∏–≤–µ—Ç—Å—Ç–≤–∏–µ", reply_markup=keyboard)
#
#     keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
#     keyboard.add(types.KeyboardButton(text="Ha—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É"))
#     msg = bot.send_message(
#         message.chat.id,
#         text="–ü—Ä–æ–π–¥–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏ —É–∑–Ω–∞–π —Å–≤–æ—ë —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ!",
#         reply_markup=keyboard)
#
#     # bot.register_next_step_handler(msg, ask_question)
#
#
# @bot.message_handler(content_types=['text'])
# def ask_question(message: types.Message, step=0, result=0):
#     if step:
#         result += answer_weights.get(message.text)
#
#     question = questions.get(step)
#     question_text = question.get('question')
#     keyboard = create_keyboard(question)
#
#     next_step = step + 1
#
#     if next_step in questions:
#         msg = bot.send_message(message.chat.id, text=question_text, reply_markup=keyboard)
#         bot.register_next_step_handler(msg, ask_question, next_step, result)
#     else:  # –≤–æ–ø—Ä–æ—Å –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–º
#         msg = bot.send_message(message.chat.id, text=question_text, reply_markup=keyboard)
#         bot.register_next_step_handler(msg, show_result, result)
#
#
# @bot.message_handler(content_types=['text'])
# def show_result(message: types.Message, result):
#     result += answer_weights.get(message.text)
#
#     text = f'–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç {result}.\n–ë–∞—Ä—Ö–∞–Ω–Ω—ã–π –∫–æ—Ç –Ω–µ –≤–ø–µ—á–∞—Ç–ª—ë–Ω.'
#     image = open('/content/barhanniy-kot6.jpeg', 'rb')
#     bot.send_photo(message.chat.id, photo=image, caption=text)
#
#     keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
#     keyboard.add(types.KeyboardButton(text="Ha—áa—Ç—å –∑a–Ωo–≤o"))
#     msg = bot.send_message(
#         message.chat.id,
#         text='–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –µ—â—ë —Ä–∞–∑, –Ω–∞–∂–º–∏ "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"',
#         reply_markup=keyboard)
#     bot.register_next_step_handler(msg, ask_question)
#
#     inline_keyboard = types.InlineKeyboardMarkup()
#     url_button = types.InlineKeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ vk", url=f"https://vk.com/share.php?&title={result}")
#     inline_keyboard.add(url_button)
#     bot.send_message(msg.chat.id, "‚¨áÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏ –≤ vk, –Ω–∞–∂–∞–≤ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ:",
#                      reply_markup=inline_keyboard)
#
#
# def create_keyboard(question):
#     keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
#     buttons = []
#     for var in question.get('variants'):
#         buttons.append(types.KeyboardButton(text=var))
#     keyboard.add(*buttons)
#     return keyboard
#
#





# def cache(func):
#     cache_dict = {}  # {n_1: result_1, n_2: result_2}
#
#     def wrapper(n):
#         if n not in cache_dict:
#             cache_dict[n] = func(n)
#         return cache_dict[n]
#
#     return wrapper
#
#
# @cache
# def pow_99(n):
#     sleep(2)
#     return n**99
#
#
# @cache
# def fibonacci(n):
#     if n <= 1:
#         return n
#     num = fibonacci(n - 1) + fibonacci(n - 2)
#     return num
#
#
# print(fibonacci(100))  # 0 1 1 2 3 5 8 13 21 34 55



# import asyncio
# import logging
# from aiogram import Bot, Dispatcher, types
# from aiogram.filters.command import Command
#
# # –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
# logging.basicConfig(level=logging.INFO)
# # –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
# bot = Bot(token="12345678:AaBbCcDdEeFfGgHh")
# # –î–∏—Å–ø–µ—Ç—á–µ—Ä
# dp = Dispatcher()
#
# # –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
# @dp.message(Command("start"))
# async def cmd_start(message: types.Message):
#     await message.answer("Hello!")
#
# # –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
# async def main():
#     await dp.start_polling(bot)
#
# if __name__ == "__main__":
#     asyncio.run(main())
#
#
# # –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /test1
# @dp.message(Command("test1"))
# async def cmd_test1(message: types.Message):
#     await message.reply("Test 1")
#
# # –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /test2
# async def cmd_test2(message: types.Message):
#     await message.reply("Test 2")
#
# bot.polling()